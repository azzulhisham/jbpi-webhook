---
apiVersion: "camel.apache.org/v1"
kind: "Integration"
metadata:
  labels:
    jetic.io/deployment.uuid: "71afae79-c170-4ecd-ab81-554058130c41"
    jetic.io/integration.name: "jbpi-webhook"
    jetic.io/integration.revision: "163"
    jetic.io/integration.uuid: "11075da6-d9e0-4d44-8504-174ee394229b"
    jetic.io/integration.version: "1.0.0"
    jetic.io/log.level: "INFO"
    jetic.io/data.analyzer: "true"
    jetic.io/profile.name: "Default"
    jetic.io/profile.uuid: "8506c8fb-b626-4a13-9424-1d485fa9daa9"
  name: "jbpi-webhook"
spec:
  configuration:
  - type: "property"
    value: "quarkus.log.console.color=true"
  - type: "property"
    value: "quarkus.log.console.level=INFO"
  dependencies:
  - "mvn:com.datagrate:messageHistory:0.21.0"
  - "mvn:org.apache.camel:camel-debezium-sqlserver:3.20.0"
  - "mvn:org.apache.camel:camel-gson:3.20.0"
  - "mvn:org.apache.camel:camel-jackson:3.20.0"
  - "mvn:org.apache.httpcomponents:httpclient:4.5.13"
  - "mvn:org.json:org.json:chargebee-1.0"
  resources:
  - compression: false
    contentKey: "mmdis-key"
    contentType: "text/plain; charset=utf-8"
    name: "mmdis-key"
    rawContent: "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"
    type: "data"
  - compression: false
    contentKey: "vts-photosvc"
    contentType: "text/plain; charset=utf-8"
    name: "vts-photosvc"
    rawContent: "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"
    type: "data"
  - compression: false
    contentKey: "vts-fugro"
    contentType: "text/plain; charset=utf-8"
    name: "vts-fugro"
    rawContent: "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"
    type: "data"
  - compression: false
    contentKey: "vts-datasvc"
    contentType: "text/plain; charset=utf-8"
    name: "vts-datasvc"
    rawContent: "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"
    type: "data"
  sources:
  - compression: false
    content: "//\n// To run this integration use:\n//\n// kamel run jbpi_webhook.groovy\n//\n\n// camel-k: language=groovy\n// camel-k: name=jbpi-webhook\n\nimport com.datagrate.messagehistory.DataAnalyzer\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.google.gson.Gson;\nimport java.io.*;\nimport java.net.HttpURLConnection;\nimport java.net.URI;\nimport java.net.URL;\nimport java.nio.charset.StandardCharsets;\nimport java.security.KeyStore;\nimport java.time.Instant;\nimport java.util.ArrayList;\nimport java.util.Base64;\nimport java.util.Date;\nimport java.util.Map;\nimport javax.net.ssl.HttpsURLConnection;\nimport javax.net.ssl.KeyManagerFactory;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.TrustManagerFactory;\nimport org.apache.camel.Exchange\nimport org.apache.camel.Processor\nimport org.apache.camel.util.json.JsonArray;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.StatusLine;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.conn.ssl.SSLConnectionSocketFactory;\nimport org.apache.http.conn.ssl.TrustSelfSignedStrategy;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.ssl.SSLContexts;\nimport org.apache.http.util.EntityUtils;\nimport org.json.JSONArray;\nimport org.json.JSONObject;\nimport org.json.XML;\n\n// activate JETIC.IO Data Analyzer\nDataAnalyzer.activate(getContext(), intercept(), onException(Throwable.class))\n\n from(\"debezium-sqlserver:dbz-mssql-1?offsetStorageFileName=offset-file-1.dat&databaseHostname=117.53.152.155&databasePort=1433&databaseUser=sa&databasePassword=Enav-DB123Sql456!!!&databaseServerName=enav&databaseDbname=VTS&tableIncludeList=dbo.Events&databaseHistoryFileFilename=history-file-1.dat&internalKeyConverter=org.apache.kafka.connect.json.JsonConverter&internalValueConverter=org.apache.kafka.connect.json.JsonConverter\")\n\t \n\t .routeId('route-1')\n    .process(new Processor() {\n        @Override\n        void process(Exchange exchange) throws Exception {\n            Object data = exchange.getIn().getBody(Object.class);\n        \n            try {\n            \tGson gson = new Gson();\n            \tString jsonString = gson.toJson(data);\n        \n            \tObjectMapper mapper = new ObjectMapper();\n            \tMap<String, Object> map = mapper.readValue(jsonString, Map.class);\n        \n            \t//Map<String, Object> schema = (Map<String, Object>) map.get(\"schema\");\n            \tArrayList<Object> values = (ArrayList<Object>) map.get(\"values\");\n        \n            \tint eventId = (int)values.get(0);\n            \tint alarmId = (int)values.get(3);\n            \tint mmsi = (int)values.get(5);\n            \tint zoneId = (int)values.get(19);\n            \tString shipName = (String)values.get(6);\n            \tString callSign = (String)values.get(7);\n            \tint imo = (int)values.get(36);\n            \tlong timeStamp = (long)values.get(1);\n        \n            \tDate date = new Date(timeStamp);\n            \tInstant instant = date.toInstant();\n            \tString resp = \"\";\n            \tBoolean photoSvcErr = true;\n        \n            \tif(alarmId == 485 || alarmId == 486 || alarmId == 487 || alarmId == 488) {\n            \t\t//get ship photo\n        \n            \t\t// Load the truststore\n            \t\tKeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n            \t\ttrustStore.load(new FileInputStream(\"/etc/camel/resources/vts-photosvc\"), \"vts-photosvc\".toCharArray());\n        \n            \t\t// Create key manager\n            \t\tKeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n            \t\tkeyManagerFactory.init(trustStore, \"vts-photosvc\".toCharArray());\n        \n            \t\t// Create a TrustManagerFactory and initialize it with the truststore\n            \t\tTrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n            \t\ttrustManagerFactory.init(trustStore);\n        \n            \t\t// Create an SSLContext and initialize it with the TrustManager\n            \t\tSSLContext sslContext = SSLContext.getInstance(\"TLS\");\n            \t\tsslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), null);\n        \n            \t\t// Set default SSLContext\n            \t\tSSLContext.setDefault(sslContext);\n        \n            \t\tURL url = new URL(\"https://photosvc.web-vts.com/ShipPhotoService/QueryService.svc/PhotosApi?i=0&mmsi=\" + mmsi);\n        \n            \t\tHttpsURLConnection MyConn = (HttpsURLConnection) url.openConnection();\n            \t\tMyConn.setSSLSocketFactory(sslContext.getSocketFactory());;\n        \n            \t\t// Set the request method to \"GET\"\n            \t\tMyConn.setRequestMethod(\"GET\");\n            \t\tMyConn.setDoOutput(true);\n            \t\tMyConn.setRequestProperty(\"Content-Type\", \"application/json; utf-8\");\n            \t\tMyConn.setRequestProperty(\"Accept\", \"application/json\");\n            \t\tMyConn.setUseCaches(false);\n        \n            \t\tint responseCode = MyConn.getResponseCode();\n            \t\t//System.out.println(\"GET Response Code :: \" + responseCode);\n        \n            \t\tif (responseCode == MyConn.HTTP_OK){\n            \t\t\t// Create a reader with the input stream reader.\n            \t\t\tBufferedReader in = new BufferedReader(new InputStreamReader(\n            \t\t\t\tMyConn.getInputStream()));\n            \t\t\tString inputLine;\n        \n            \t\t\t// Create a string buffer\n            \t\t\tStringBuffer response = new StringBuffer();\n        \n            \t\t\t// Write each of the input line\n            \t\t\twhile ((inputLine = in.readLine()) != null) {\n            \t\t\t\tresponse.append(inputLine);\n            \t\t\t}\n            \t\t\tin.close();\n        \n            \t\t\tresp = response.toString();\n            \t\t\tresp = resp.substring(1, resp.length() - 1);\n            \t\t\tphotoSvcErr = false;\n        \n            \t\t\t//System.out.println(\"Response :: \" + response);\n            \t\t\t//exchange.getIn().setBody(resp);\n            \t\t}\n            \t\telse {\n            \t\t\t// Create a reader with the input stream reader.\n            \t\t\tBufferedReader in = new BufferedReader(new InputStreamReader(\n            \t\t\t\tMyConn.getInputStream()));\n            \t\t\tString inputLine;\n        \n            \t\t\t// Create a string buffer\n            \t\t\tStringBuffer response = new StringBuffer();\n        \n            \t\t\t// Write each of the input line\n            \t\t\twhile ((inputLine = in.readLine()) != null) {\n            \t\t\t\tresponse.append(inputLine);\n            \t\t\t}\n            \t\t\tin.close();\n        \n            \t\t\tresp = response.toString();\n            \t\t\t//exchange.getIn().setBody(resp);\n            \t\t}\n            \t}\n        \n            \tJSONObject pl = new JSONObject();\n            \tpl.put(\"eventId\", eventId);\n            \tpl.put(\"alarmId\", alarmId);\n            \tpl.put(\"mmsi\", mmsi);\n            \tpl.put(\"zoneId\", zoneId);\n            \tpl.put(\"shipName\", shipName);\n            \tpl.put(\"callSign\", callSign);\n            \tpl.put(\"imo\", imo);\n            \tpl.put(\"timeStamp\", instant);\n            \tpl.put(\"photoUrl\", resp);\n            \tpl.put(\"photoSvcErr\", photoSvcErr);\n        \n            \texchange.getIn().setBody(pl);\n        \n            \t//String body = \"event :: \" + eventId  + \"   -   Zone :: \" + zoneId + \"   -   Date :: \" + instant;\n            \t//System.out.println(body);\n        \n            } catch (Exception exception) {\n            \tString body = \"error :: \" + exception.getMessage() + \"   ::   \" + data;\n            \tSystem.out.println(body);\n            \texchange.getIn().setBody(body);\n            }\n        \n        \n        }\n    }).id('process-00')\n    .process(new Processor() {\n        @Override\n        void process(Exchange exchange) throws Exception {\n            Object payload = exchange.getIn().getBody();\n        \n            JSONObject pl = new JSONObject();\n            pl = (JSONObject)payload;\n        \n            String photoUrlString = pl.getString(\"photoUrl\");\n            int picId = 0;\n            String picUrl =\"\";\n        \n            if(photoUrlString != \"\") {\n            \tJSONObject json =  new JSONObject(photoUrlString);\n            \tJSONArray array = json.getJSONArray(\"items\");\n        \n            \tfor(int i=0; i<array.length(); i++){\n            \t\tJSONObject picInfo = array.getJSONObject(i);\n            \t\tint picIdObj = picInfo.getInt(\"PicID\");\n        \n            \t\tif(picIdObj > picId){\n            \t\t\tpicId = picIdObj;\n            \t\t}\n            \t}\n        \n            \tfor(int i=0; i<array.length(); i++){\n            \t\tJSONObject picInfo = array.getJSONObject(i);\n            \t\tint picIdObj = picInfo.getInt(\"PicID\");\n        \n            \t\tif(picIdObj == picId){\n            \t\t\tpicUrl = picInfo.getString(\"name\");\n            \t\t}\n            \t}\n            }\n        \n            pl.put(\"picUrl\", picUrl);\n            //System.out.println(pl);\n        \n            if(picUrl != \"\"){\n        \n            \tKeyStore keyStore = KeyStore.getInstance(\"JKS\");\n            \tFileInputStream instream = new FileInputStream(new File(\"/etc/camel/resources/vts-fugro\"));\n            \ttry {\n            \t\tkeyStore.load(instream, \"vts-fugro\".toCharArray());\n            \t} finally {\n            \t\tinstream.close();\n            \t}\n        \n            \t// Create the SSL context\n            \tSSLContext sslContext = SSLContexts.custom()\n            \t\t\t\t.loadTrustMaterial(keyStore, new TrustSelfSignedStrategy())\n            \t\t\t\t.build();\n        \n            \t// Create the socket factory\n            \tSSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(sslContext);\n        \n            \t// Create the http client\n            \tHttpClient httpClient = HttpClients.custom()\n            \t\t\t\t.setSSLSocketFactory(socketFactory)\n            \t\t\t\t.build();\n        \n            \t// Make the request\t\t\n            \tHttpGet httpGet = new HttpGet(picUrl);\t\t\t\t\t\t\t\t\n        \n            \tHttpResponse response = httpClient.execute(httpGet);\n            \tHttpEntity responseEntity = response.getEntity();\n        \n            \tStatusLine statusLine = response.getStatusLine();\n            \tint statusCode = statusLine.getStatusCode();\n        \n            \tif(statusCode == 200) {\n            \t\tbyte[] result = EntityUtils.toByteArray(responseEntity);\n            \t\tString encodedImage = Base64.getEncoder().encodeToString(result);\t\n        \n            \t\tpl.put(\"picBase64\", encodedImage);\n            \t} else {\n            \t\tpl.put(\"picBase64\", \"\");\n            \t}\n            } else {\n            \tpl.put(\"picBase64\", \"\");\n            }\n        \n            exchange.getIn().setBody(pl);\n        \n        }\n    }).id('process-01')\n    .process(new Processor() {\n        @Override\n        void process(Exchange exchange) throws Exception {\n            Object payload = exchange.getIn().getBody();\n        \n            JSONObject pl = new JSONObject();\n            pl = (JSONObject)payload;\n        \n            int eventId = pl.getInt(\"eventId\");\n            int alarmId = pl.getInt(\"alarmId\");\n            int mmsi = pl.getInt(\"mmsi\");\n        \n            exchange.getIn().setHeader(\"_eventId\", eventId);\n            exchange.getIn().setHeader(\"_mmsi\", mmsi);\n        \n            if(alarmId == 485 || alarmId == 486 || alarmId == 487 || alarmId == 488) {\n        \n            \t// Load the truststore\n            \tKeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n            \ttrustStore.load(new FileInputStream(\"/etc/camel/resources/vts-datasvc\"), \"vts-datasvc\".toCharArray());\n        \n            \t// Create key manager\n            \tKeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n            \tkeyManagerFactory.init(trustStore, \"vts-datasvc\".toCharArray());\n        \n            \t// Create a TrustManagerFactory and initialize it with the truststore\n            \tTrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n            \ttrustManagerFactory.init(trustStore);\n        \n            \t// Create an SSLContext and initialize it with the TrustManager\n            \tSSLContext sslContext = SSLContext.getInstance(\"TLS\");\n            \tsslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), null);\n        \n            \t// Set default SSLContext\n            \tSSLContext.setDefault(sslContext);\n        \n            \tURL url = new URL(\"https://datasvc.web-vts.com/ShipService2/LloydsService.svc/DataApi?i=0&mmsi=\" + mmsi);\n        \n            \tHttpsURLConnection MyConn = (HttpsURLConnection) url.openConnection();\n            \tMyConn.setSSLSocketFactory(sslContext.getSocketFactory());;\n        \n            \t// Set the request method to \"GET\"\n            \tMyConn.setRequestMethod(\"GET\");\n            \tMyConn.setDoOutput(true);\n            \tMyConn.setRequestProperty(\"Content-Type\", \"application/json; utf-8\");\n            \tMyConn.setRequestProperty(\"Accept\", \"application/json\");\n            \tMyConn.setUseCaches(false);\n        \n            \tint responseCode = MyConn.getResponseCode();\n        \n            \tif (responseCode == MyConn.HTTP_OK){\n            \t\t// Create a reader with the input stream reader.\n            \t\tBufferedReader in = new BufferedReader(new InputStreamReader(\n            \t\t\tMyConn.getInputStream()));\n            \t\tString inputLine;\n        \n            \t\t// Create a string buffer\n            \t\tStringBuffer response = new StringBuffer();\n        \n            \t\t// Write each of the input line\n            \t\twhile ((inputLine = in.readLine()) != null) {\n            \t\t\tresponse.append(inputLine);\n            \t\t}\n        \n            \t\tin.close();\n        \n            \t\tString resp = response.toString();\n            \t\tresp = resp.substring(1, resp.length() - 1);\n        \n            \t\tif(resp != \"\") {\n            \t\t\tJSONObject pl_resp = new JSONObject(resp);\n            \t\t\tJSONArray array = pl_resp.getJSONArray(\"items\");\n        \n            \t\t\tfor(int i=0; i<array.length(); i++){\n            \t\t\t\tJSONObject data = array.getJSONObject(i);\n            \t\t\t\tString label = data.getString(\"label\");\n            \t\t\t\tString text = data.getString(\"text\");\n        \n            \t\t\t\tif(label.toLowerCase().equals(\"imo ship no\")) {\n            \t\t\t\t\texchange.getIn().setHeader(\"_imo\", text);\n            \t\t\t\t}\n            \t\t\t\tif(label.toLowerCase().equals(\"ship name\")) {\n            \t\t\t\t\texchange.getIn().setHeader(\"_shipname\", text);\n            \t\t\t\t}\n            \t\t\t\tif(label.toLowerCase().equals(\"call sign\")) {\n            \t\t\t\t\texchange.getIn().setHeader(\"_callsign\", text);\n            \t\t\t\t}\n            \t\t\t\tif(label.toLowerCase().equals(\"official number\")) {\n            \t\t\t\t\texchange.getIn().setHeader(\"_officialnumber\", text);\n            \t\t\t\t\tpl.put(\"officialnumber\", text);\n            \t\t\t\t}\n            \t\t\t}\n            \t\t}\n            \t\telse {\n            \t\t\texchange.getIn().setHeader(\"_imo\", \"\");\n            \t\t\texchange.getIn().setHeader(\"_shipname\", \"\");\n            \t\t\texchange.getIn().setHeader(\"_callsign\", \"\");\n            \t\t\texchange.getIn().setHeader(\"_officialnumber\", \"\");\n            \t\t\tpl.put(\"officialnumber\", \"\");\t\n            \t\t}\n            \t}\n            \telse {\n            \t\t// Create a reader with the input stream reader.\n            \t\tBufferedReader in = new BufferedReader(new InputStreamReader(\n            \t\t\tMyConn.getInputStream()));\n            \t\tString inputLine;\n        \n            \t\t// Create a string buffer\n            \t\tStringBuffer response = new StringBuffer();\n        \n            \t\t// Write each of the input line\n            \t\twhile ((inputLine = in.readLine()) != null) {\n            \t\t\tresponse.append(inputLine);\n            \t\t}\n        \n            \t\tin.close();\n        \n            \t\t//exchange.getIn().setBody(resp);\n            \t}\n        \n            }\n        \n            exchange.getIn().setBody(pl);\n        \n        }\n    }).id('process-02')\n    .process(new Processor() {\n        @Override\n        void process(Exchange exchange) throws Exception {\n            Object payload = exchange.getIn().getBody();\n        \n            JSONObject pl = new JSONObject();\n            pl = (JSONObject)payload;\n        \n            int eventId = pl.getInt(\"eventId\");\n            int alarmId = pl.getInt(\"alarmId\");\n            int mmsi = pl.getInt(\"mmsi\");\n        \n            if(alarmId == 485 || alarmId == 486 || alarmId == 487 || alarmId == 488) {\n        \n            \t// Providing the website URL\n            \tURL url = new URL(\"http://34.124.195.95:8080/jbpi/getEventById?_eventId=\" + eventId);\n        \n            \t// Creating an HTTP connection\n            \tHttpURLConnection MyConn = (HttpURLConnection) url.openConnection();\n            \tMyConn.setRequestMethod(\"GET\");\n            \tMyConn.setDoOutput(true);\n            \tMyConn.setRequestProperty(\"Content-Type\",\"application/json\");\n        \n            \tint responseCode = MyConn.getResponseCode();\n        \n            \tif (responseCode == MyConn.HTTP_OK) {\n            \t\tBufferedReader in = new BufferedReader(new InputStreamReader(\n            \t\t\tMyConn.getInputStream()));\n            \t\tString inputLine;\n        \n            \t\t// Create a string buffer\n            \t\tStringBuffer response = new StringBuffer();\n        \n            \t\t// Write each of the input line\n            \t\twhile ((inputLine = in.readLine()) != null) {\n            \t\t\tresponse.append(inputLine);\n            \t\t}\n            \t\tin.close();\n        \n            \t\tString resp = response.toString();\n            \t\tJSONArray array = new JSONArray(resp);\n            \t\tJSONObject item = array.getJSONObject(0);\n        \n            \t\t//payload :: VTMSVesselVisit\n            \t\tJSONObject VTMSVesselVisit = new JSONObject();\n            \t\tVTMSVesselVisit.put(\"imo\", !item.getString(\"imo\").equals(\"\") ? item.getString(\"imo\") : exchange.getIn().getHeader(\"_imo\").toString());\n            \t\tVTMSVesselVisit.put(\"callsign\", !item.getString(\"callsign\").equals(\"\") ? item.getString(\"callsign\") : exchange.getIn().getHeader(\"_callsign\"));\n            \t\tVTMSVesselVisit.put(\"officialnumber\", exchange.getIn().getHeader(\"_officialnumber\").toString());\n            \t\tVTMSVesselVisit.put(\"mmsi\", !exchange.getIn().getHeader(\"_mmsi\").toString().equals(\"\") ? exchange.getIn().getHeader(\"_mmsi\").toString() : Integer.toString(mmsi));\n            \t\tVTMSVesselVisit.put(\"vesselName\", !item.getString(\"vesselName\").equals(\"\") ? item.getString(\"vesselName\") : exchange.getIn().getHeader(\"_shipname\"));\n            \t\tVTMSVesselVisit.put(\"time\", item.getString(\"time\"));\n            \t\tVTMSVesselVisit.put(\"visitStatusId\", item.getString(\"visitStatusId\"));\n            \t\tVTMSVesselVisit.put(\"zone\", item.getString(\"zone\"));\n        \n            \t\tJSONObject VTMSVesselVisitObj = new JSONObject();\n            \t\tVTMSVesselVisitObj.put(\"VTMSVesselVisit\", VTMSVesselVisit)\n        \n            \t\tpl.put(\"VTMSVesselVisitObj\", VTMSVesselVisitObj);\n        \n        \n            \t\t//payload :: VTMSVesselPhoto\n            \t\tJSONObject VTMSVesselPhoto = new JSONObject();\n            \t\tVTMSVesselPhoto.put(\"imo\", !item.getString(\"imo\").equals(\"\") ? item.getString(\"imo\") : exchange.getIn().getHeader(\"_imo\").toString());\n            \t\tVTMSVesselPhoto.put(\"callsign\", !item.getString(\"callsign\").equals(\"\") ? item.getString(\"callsign\") : exchange.getIn().getHeader(\"_callsign\"));\n            \t\tVTMSVesselPhoto.put(\"officialnumber\", exchange.getIn().getHeader(\"_officialnumber\").toString());\n            \t\tVTMSVesselPhoto.put(\"mmsi\", !exchange.getIn().getHeader(\"_mmsi\").toString().equals(\"\") ? exchange.getIn().getHeader(\"_mmsi\").toString() : Integer.toString(mmsi));\n            \t\tVTMSVesselPhoto.put(\"vesselName\", !item.getString(\"vesselName\").equals(\"\") ? item.getString(\"vesselName\") : exchange.getIn().getHeader(\"_shipname\"));\n            \t\tVTMSVesselPhoto.put(\"time\", item.getString(\"time\"));\n            \t\tVTMSVesselPhoto.put(\"photoBase64\", pl.getBoolean(\"photoSvcErr\") ? \"\" : pl.getString(\"picBase64\"));\n        \n            \t\tJSONObject VTMSVesselPhotoObj = new JSONObject();\n            \t\tVTMSVesselPhotoObj.put(\"VTMSVesselPhoto\", VTMSVesselPhoto)\n        \n            \t\tpl.put(\"VTMSVesselPhotoObj\", VTMSVesselPhotoObj);\n        \n            \t\t//System.out.println(\"VTMSVesselPhotoObj :: \" + VTMSVesselPhotoObj);\n            \t}\n            \telse {\n            \t\t// Create a reader with the input stream reader.\n            \t\tBufferedReader in = new BufferedReader(new InputStreamReader(\n            \t\t\tMyConn.getInputStream()));\n            \t\tString inputLine;\n        \n            \t\t// Create a string buffer\n            \t\tStringBuffer response = new StringBuffer();\n        \n            \t\t// Write each of the input line\n            \t\twhile ((inputLine = in.readLine()) != null) {\n            \t\t\tresponse.append(inputLine);\n            \t\t}\n            \t\tin.close();\n        \n            \t\tString resp = response.toString();\n        \n            \t\tpl.put(\"VTMSVesselVisitObj\", new JSONObject());\n            \t\tpl.put(\"VTMSVesselPhotoObj\", new JSONObject());\n            \t}\n            }\n        \n            exchange.getIn().setBody(pl);\n        }\n    }).id('process-03')\n    .process(new Processor() {\n        @Override\n        void process(Exchange exchange) throws Exception {\n            Object payload = exchange.getIn().getBody();\n        \n            JSONObject pl = new JSONObject();\n            pl = (JSONObject)payload;\n        \n            int eventId = pl.getInt(\"eventId\");\n            int alarmId = pl.getInt(\"alarmId\");\n            int mmsi = pl.getInt(\"mmsi\");\n        \n            if(alarmId == 485 || alarmId == 486 || alarmId == 487 || alarmId == 488){\n        \n            \tJSONObject VTMSVesselVisit = pl.getJSONObject(\"VTMSVesselVisitObj\");\n        \n            \tif(VTMSVesselVisit.length() != 0){\n            \t\t// Providing the website URL\n            \t\t//http://staging2.johorport.com.my/VTMS_Web/rest/vessel/visitstatus\n            \t\tURL url = new URL(\"http://154e-2001-e68-544e-b4e7-e5b1-30fd-aaf8-973.ap.ngrok.io/nifihook\");\n        \n            \t\t// Creating an HTTP connection\n            \t\tHttpURLConnection MyConn = (HttpURLConnection) url.openConnection();\n            \t\tMyConn.setRequestMethod(\"POST\");\n            \t\tMyConn.setDoOutput(true);\n            \t\tMyConn.setRequestProperty(\"Content-Type\",\"application/json\");\n        \n            \t\tbyte[] out = VTMSVesselVisit.toString().getBytes(StandardCharsets.UTF_8);\n            \t\tOutputStream stream = MyConn.getOutputStream();\n            \t\tstream.write(out);\n        \n            \t\tint responseCode = MyConn.getResponseCode();\n        \n            \t\tif (responseCode == MyConn.HTTP_CREATED) {\n            \t\t\tBufferedReader in = new BufferedReader(new InputStreamReader(\n            \t\t\t\tMyConn.getInputStream()));\n            \t\t\tString inputLine;\n        \n            \t\t\t// Create a string buffer\n            \t\t\tStringBuffer response = new StringBuffer();\n        \n            \t\t\t// Write each of the input line\n            \t\t\twhile ((inputLine = in.readLine()) != null) {\n            \t\t\t\tresponse.append(inputLine);\n            \t\t\t}\n            \t\t\tin.close();\n        \n            \t\t\tString resp = response.toString();\n            \t\t\tSystem.out.println(resp);\n            \t\t}\n            \t}\n            }\n        \n        \n        }\n    }).id('process-04')"
    name: "jbpi-webhook.groovy"
  traits:
    jolokia:
      configuration:
        enabled: true
    logging:
      configuration:
        enabled: true
        level: "DEBUG"
    owner:
      configuration:
        enabled: true
        targetLabels:
        - "jetic.io/data.analyzer"
        - "jetic.io/deployment.uuid"
        - "jetic.io/integration.name"
        - "jetic.io/integration.revision"
        - "jetic.io/integration.uuid"
        - "jetic.io/integration.version"
        - "jetic.io/log.level"
        - "jetic.io/open.api.host"
        - "jetic.io/profile.name"
        - "jetic.io/profile.uuid"
