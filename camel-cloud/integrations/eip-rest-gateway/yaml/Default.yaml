---
apiVersion: "camel.apache.org/v1"
kind: "Integration"
metadata:
  labels:
    jetic.io/deployment.uuid: "88da61c0-cf45-44bb-907b-43a3082aefe5"
    jetic.io/integration.name: "eip-rest-gateway"
    jetic.io/integration.revision: "211"
    jetic.io/integration.uuid: "2159a225-aa1a-46e5-a385-ddb885a61e69"
    jetic.io/integration.version: "1.0.0"
    jetic.io/log.level: "INFO"
    jetic.io/data.analyzer: "true"
    jetic.io/profile.name: "Default"
    jetic.io/profile.uuid: "8506c8fb-b626-4a13-9424-1d485fa9daa9"
    jetic.io/open.api.host: "eip-rest-gw.pinc.my"
  name: "eip-rest-gateway"
spec:
  configuration:
  - type: "env"
    value: "EIP-GW.JSON=2023-04-05T15:38:54.051"
  - type: "property"
    value: "quarkus.log.console.color=true"
  - type: "property"
    value: "quarkus.log.console.level=INFO"
  dependencies:
  - "mvn:com.datagrate:messageHistory:0.21.0"
  - "mvn:com.microsoft.sqlserver:mssql-jdbc:11.2.3.jre11"
  - "mvn:org.apache.commons:commons-dbcp2:2.9.0"
  - "mvn:org.json:org.json:chargebee-1.0"
  resources:
  - compression: false
    contentKey: "text.txt"
    contentType: "text/plain; charset=utf-8"
    name: "text.txt"
    rawContent: "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"
    type: "data"
  - content: "{\"openapi\":\"3.0.2\",\"info\":{\"title\":\"eip-gw\",\"version\":\"1.0.0\"},\"servers\":[{\"url\":\"/\"}],\"paths\":{\"/\":{\"get\":{\"responses\":{\"200\":{\"content\":{\"application/json\":{\"schema\":{\"type\":\"string\"}}},\"description\":\"default response description\"}},\"operationId\":\"default\"}},\"/ddms/getAllVessels\":{\"get\":{\"responses\":{\"200\":{\"content\":{\"application/json\":{\"schema\":{\"type\":\"string\"}}},\"description\":\"default response description\"}},\"operationId\":\"ddms\"}},\"/lrit/shipInfo/{imo}\":{\"get\":{\"responses\":{\"200\":{\"content\":{\"application/json\":{\"schema\":{\"type\":\"string\"}}},\"description\":\"default response description\"}},\"operationId\":\"lrit get ship info\"},\"parameters\":[{\"name\":\"imo\",\"description\":\"default path variable description\",\"schema\":{\"type\":\"string\"},\"in\":\"path\",\"required\":true}]},\"/lrit/shipPositions\":{\"get\":{\"responses\":{\"200\":{\"content\":{\"application/json\":{\"schema\":{\"type\":\"string\"}}},\"description\":\"default response description\"}},\"operationId\":\"lrit get ships position\"}},\"/mmdis/vessel/{imo}\":{\"get\":{\"responses\":{\"200\":{\"content\":{\"application/json\":{\"schema\":{\"type\":\"string\"}}},\"description\":\"default response description\"}},\"operationId\":\"mmdis get vessel\"},\"parameters\":[{\"name\":\"imo\",\"description\":\"default path variable description\",\"schema\":{\"type\":\"string\"},\"in\":\"path\",\"required\":true}]},\"/jbpi/getEventById\":{\"get\":{\"responses\":{\"200\":{\"content\":{\"application/json\":{\"schema\":{\"type\":\"string\"}}},\"description\":\"default response description\"}},\"operationId\":\"jbpi get event by id\"}},\"/mdm/tokenauth/authenticate\":{\"post\":{\"responses\":{\"200\":{\"content\":{\"application/json\":{\"schema\":{\"type\":\"string\"}}},\"description\":\"default response description\"}},\"operationId\":\"mdm get auth token\"}},\"/mdm/getvessels\":{\"get\":{\"responses\":{\"200\":{\"content\":{\"application/json\":{\"schema\":{\"type\":\"string\"}}},\"description\":\"default response description\"}},\"operationId\":\"mdm get vessels\"}},\"/mdm/getvessels/{countryCode}\":{\"get\":{\"responses\":{\"200\":{\"content\":{\"application/json\":{\"schema\":{\"type\":\"string\"}}},\"description\":\"default response description\"}},\"operationId\":\"mdm get vessels by country code\"},\"parameters\":[{\"name\":\"countryCode\",\"description\":\"default path variable description\",\"schema\":{\"type\":\"string\"},\"in\":\"path\",\"required\":true}]},\"/mdm/getvessel/{mmsi}\":{\"get\":{\"responses\":{\"200\":{\"content\":{\"application/json\":{\"schema\":{\"type\":\"string\"}}},\"description\":\"default response description\"}},\"operationId\":\"mdm get vessel by mmsi\"},\"parameters\":[{\"name\":\"mmsi\",\"description\":\"default path variable description\",\"schema\":{\"type\":\"string\"},\"in\":\"path\",\"required\":true}]},\"/mdm/getMethydro\":{\"get\":{\"responses\":{\"200\":{\"content\":{\"application/json\":{\"schema\":{\"type\":\"string\"}}},\"description\":\"default response description\"}},\"operationId\":\"mdm get Methydro\"}}},\"components\":{}}"
    name: "eip-gw.json"
    type: "openapi"
  sources:
  - compression: false
    content: "//\n// To run this integration use:\n//\n// kamel run eip_rest_gateway.groovy\n//\n\n// camel-k: language=groovy\n// camel-k: name=eip-rest-gateway\n\n// import org.apache.camel.Message\nimport com.datagrate.messagehistory.DataAnalyzer\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.nio.charset.StandardCharsets;\nimport org.apache.camel.Exchange\nimport org.apache.camel.Processor\nimport org.apache.camel.model.dataformat.JsonLibrary\nimport org.json.JSONObject;\nimport org.json.XML;\n\n// activate JETIC.IO Data Analyzer\nDataAnalyzer.activate(getContext(), intercept(), onException(Throwable.class))\n\nfrom('direct://default').routeId('route-1')\n    .setBody().simple('This is a EIP Gateway for MMDIS, LRIT and DDMS.').id('setBody-00')\n\nfrom('direct://ddms').routeId('route-2')\n    .to('sql:SELECT sl.ShipListID, sl.IMO, sl.CallSign, sl.Name, sl.ShipType, sl.Dimension_A, sl.Dimension_B, sl.Dimension_C, sl.Dimension_D, sl.MaxDraught, sl.Destination, sl.ETA, sl.EquipTypeID, sl.ESN, sl.DNID, sl.MemberNumber, ddms.*  FROM [VTS].[dbo].[ShipList] sl INNER JOIN [VTS].[dbo].[Draught] ddms on ddms.MMSI = sl.MMSI?batch=false&dataSource=#enavSqlServer&useMessageBodyForSql=false').id('sql-00')\n    .marshal().json(JsonLibrary.Jackson).id('toJson-00')\n\nfrom('direct://lrit get ship info').routeId('route-3')\n    .setBody().simple('${header.imo}').id('setBody-01')\n    .process(new Processor() {\n        @Override\n        void process(Exchange exchange) throws Exception {\n            // Providing the website URL\n            URL url = new URL(\"http://lrit.com.my/ASPPositionWebServices/service.asmx\");\n        \n            // Creating an HTTP connection\n            HttpURLConnection MyConn = (HttpURLConnection) url.openConnection();\n            // Set the request method to \"GET\"\n            //MyConn.setRequestMethod(\"GET\");\n            MyConn.setRequestMethod(\"POST\");\n            MyConn.setDoOutput(true);\n            MyConn.setRequestProperty(\"Content-Type\",\"text/xml\");\n            MyConn.setRequestProperty(\"SOAPAction\", \"\\\"http://LRIT.svc/GetShipInfo\\\"\");\n            //MyConn.setRequestProperty(\"Authorization\", \"Basic \" + Base64.getEncoder().encodeToString((userName + \":\" + password).getBytes()));\n        \n            String imo = exchange.getIn().getBody(String.class);\n        \n            String payload = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\" +\n                                                        \"<soap:Envelope xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\" +\n                                                        \"<soap:Body>\" +\n                                                        \"<GetShipInfo xmlns=\\\"http://LRIT.svc/\\\">\" +\n                                                        \"<IMONumber>\" + imo + \"</IMONumber>\" +\n                                                        \"</GetShipInfo>\" +\n                                                        \"</soap:Body>\" +\n                                                        \"</soap:Envelope>\";\n        \n        \n            byte[] out = payload.getBytes(StandardCharsets.UTF_8);\n            OutputStream stream = MyConn.getOutputStream();\n            stream.write(out);\n        \n            int responseCode = MyConn.getResponseCode();\n            //System.out.println(\"GET Response Code :: \" + responseCode);\n        \n            if (responseCode == MyConn.HTTP_OK) {\n            \t// Create a reader with the input stream reader.\n            \tBufferedReader in = new BufferedReader(new InputStreamReader(\n            \t\tMyConn.getInputStream()));\n            \tString inputLine;\n        \n            \t// Create a string buffer\n            \tStringBuffer response = new StringBuffer();\n        \n            \t// Write each of the input line\n            \twhile ((inputLine = in.readLine()) != null) {\n            \t\tresponse.append(inputLine);\n            \t}\n            \tin.close();\n        \n            \tString xml = response.toString();\n        \n            \tbyte[] encoded = xml.getBytes();\n            \tJSONObject xmlJSONObj = XML.toJSONObject(new String(encoded));\n            \t//String json = xmlJSONObj.toString(4);\n        \n            \tJSONObject envelope = xmlJSONObj.getJSONObject(\"soap:Envelope\");\n            \tJSONObject body = envelope.getJSONObject(\"soap:Body\");\n        \n            \tJSONObject result = new JSONObject();\n            \tresult.put(\"Body\", body);\n        \n            \texchange.getIn().setBody(result.toString(4));\n        \n            } else {\n            \tSystem.out.println(\"Error found !!!\");\n            }\n        }\n    }).id('process-00')\n\nfrom('direct://lrit get ships position').routeId('route-4')\n    .process(new Processor() {\n        @Override\n        void process(Exchange exchange) throws Exception {\n            Object startDate = exchange.getIn().getHeader(\"startDate\");\n            Object endDate = exchange.getIn().getHeader(\"endDate\");\n        \n            URL url = new URL(\"http://lrit.com.my/ASPPositionWebServices/service.asmx\");\n        \n            // Creating an HTTP connection\n            HttpURLConnection MyConn = (HttpURLConnection) url.openConnection();\n            // Set the request method to \"GET\"\n            //MyConn.setRequestMethod(\"GET\");\n            MyConn.setRequestMethod(\"POST\");\n            MyConn.setDoOutput(true);\n            MyConn.setRequestProperty(\"Content-Type\",\"text/xml\");\n            MyConn.setRequestProperty(\"SOAPAction\", \"\\\"http://LRIT.svc/GetPositions\\\"\");\n            //MyConn.setRequestProperty(\"Authorization\", \"Basic \" + Base64.getEncoder().encodeToString((userName + \":\" + password).getBytes()));\n        \n        \n            String payload = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\" +\n            \t\"<soap:Envelope xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\" +\n            \t\"<soap:Body>\" +\n            \t\"<GetPositions xmlns=\\\"http://LRIT.svc/\\\">\" +\n            \t\"<from>\" + startDate + \"</from>\" +\n            \t\"<to>\" + endDate + \"</to>\" +\n            \t\"</GetPositions>\" +\n            \t\"</soap:Body>\" +\n            \t\"</soap:Envelope>\";\n        \n            byte[] out = payload.getBytes(StandardCharsets.UTF_8);\n            OutputStream stream = MyConn.getOutputStream();\n            stream.write(out);\n        \n            int responseCode = MyConn.getResponseCode();\n            //System.out.println(\"GET Response Code :: \" + responseCode);\n        \n            if (responseCode == MyConn.HTTP_OK) {\n            \t// Create a reader with the input stream reader.\n            \tBufferedReader in = new BufferedReader(new InputStreamReader(\n            \t\tMyConn.getInputStream()));\n            \tString inputLine;\n        \n            \t// Create a string buffer\n            \tStringBuffer response = new StringBuffer();\n        \n            \t// Write each of the input line\n            \twhile ((inputLine = in.readLine()) != null) {\n            \t\tresponse.append(inputLine);\n            \t}\n            \tin.close();\n        \n            \tString xml = response.toString();\n            \tbyte[] encoded = xml.getBytes();\n            \tJSONObject xmlJSONObj = XML.toJSONObject(new String(encoded));\n            \tString json = xmlJSONObj.toString(4);\n        \n            \tJSONObject envelope = xmlJSONObj.getJSONObject(\"soap:Envelope\");\n            \tJSONObject body = envelope.getJSONObject(\"soap:Body\");\n        \n            \tJSONObject result = new JSONObject();\n            \tresult.put(\"Body\", body);\n        \n            \texchange.getIn().setBody(result.toString(4));\n            } else {\n            \tSystem.out.println(\"Error found !!!\");\n            }\n        \n        }\n    }).id('process-01')\n\nfrom('direct://mmdis get vessel').routeId('route-5')\n    .process(new Processor() {\n        @Override\n        void process(Exchange exchange) throws Exception {\n            Object imo = exchange.getIn().getHeader(\"imo\");\n            System.out.println(\"imo :: \" + imo);\n            exchange.getIn().setBody(\"\");\n        \n            URL url = new URL(\"http://mdm.enav.my:50837/api/MMDIS/vessel/\" + imo);\n        \n            HttpURLConnection MyConn = (HttpURLConnection) url.openConnection();\n            // Set the request method to \"GET\"\n            MyConn.setRequestMethod(\"GET\");\n            MyConn.setDoOutput(true);\n            MyConn.setRequestProperty(\"Content-Type\",\"application/json\");\n            //MyConn.setRequestProperty(\"Authorization\", \"Basic \" + Base64.getEncoder().encodeToString((userName + \":\" + password).getBytes()));\n        \n        \n            //String payload = \"{\" +\n            //\t\t\t\t\t\t\t\t\t\"\\\"vesselId\\\": \" + \"\\\"\\\",\" +\n            //\t\t\t\t\t\t\t\t\t\"\\\"vesselName\\\": \" + \"\\\"\\\",\" +\n            //\t\t\t\t\t\t\t\t\t\"\\\"officialNumber\\\": \" + \"\\\"\\\",\" +\n            //\t\t\t\t\t\t\t\t\t\"\\\"imoNumber\\\": \" + \"\\\"\" + imo +  \"\\\"\" +\n            //\t\t\t\t\t\t\t\t\t\"}\";\n        \n            //byte[] out = payload.getBytes(StandardCharsets.UTF_8);\n            //OutputStream stream = MyConn.getOutputStream();\n            //stream.write(out);\n        \n            int responseCode = MyConn.getResponseCode();\n            System.out.println(\"GET Response Code :: \" + responseCode);\n        \n            if (responseCode == MyConn.HTTP_OK) {\n            \t// Create a reader with the input stream reader.\n            \tBufferedReader in = new BufferedReader(new InputStreamReader(\n            \t\tMyConn.getInputStream()));\n            \tString inputLine;\n        \n            \t// Create a string buffer\n            \tStringBuffer response = new StringBuffer();\n        \n            \t// Write each of the input line\n            \twhile ((inputLine = in.readLine()) != null) {\n            \t\tresponse.append(inputLine);\n            \t}\n            \tin.close();\n        \n            \tString resp = response.toString();\n        \n            \texchange.getIn().setBody(resp);\n            } else {\n            \t// Create a reader with the input stream reader.\n            \tBufferedReader in = new BufferedReader(new InputStreamReader(\n            \t\tMyConn.getInputStream()));\n            \tString inputLine;\n        \n            \t// Create a string buffer\n            \tStringBuffer response = new StringBuffer();\n        \n            \t// Write each of the input line\n            \twhile ((inputLine = in.readLine()) != null) {\n            \t\tresponse.append(inputLine);\n            \t}\n            \tin.close();\n        \n            \tString resp = response.toString();\n        \n            \texchange.getIn().setBody(resp);\n            }\n        \n        }\n    }).id('process-02')\n\nfrom('direct://jbpi get event by id').routeId('route-6')\n    .process(new Processor() {\n        @Override\n        void process(Exchange exchange) throws Exception {\n            exchange.setProperty(\"_eventId\", exchange.getIn().getHeader(\"_eventId\"));\n            //exchange.setProperty(\"_mmsi\", exchange.getIn().getHeader(\"_mmsi\"));\n            //exchange.setProperty(\"_officialnumber\", exchange.getIn().getHeader(\"_officialnumber\"));\n        }\n    }).id('process-03')\n    .to(\"sql:SELECT  IIF(shp.IMO is null OR shp.IMO = 0, '', CONVERT(nvarchar,shp.IMO)) as imo, IIF(shp.CallSign is null, '', CONVERT(nvarchar, shp.CallSign)) as callsign, IIF(shp.Name is null, '', CONVERT(nvarchar, shp.Name)) as vesselName,  Format(evt.TimeStmp, 'dd/MM/yy HH:mm:ss') as time,     CASE        WHEN evt.AlarmID = 485 THEN '0'         WHEN evt.AlarmID = 486 THEN '2'     WHEN evt.AlarmID = 487 THEN '1'     WHEN evt.AlarmID = 488 THEN '7'      END as visitStatusId,      CASE        WHEN evt.AlarmID = 485 THEN ''        WHEN evt.AlarmID = 486 THEN ''    WHEN evt.AlarmID = 487 THEN zon.ZoneName    WHEN evt.AlarmID = 488 THEN zon.ZoneName     END as zone  FROM Events evt  LEFT JOIN Zones zon on zon.ZoneID = evt.ZoneID  LEFT JOIN ShipList shp on shp.MMSI = evt.MMSI  WHERE EventID=:#\\${exchangeProperty._eventId} ?batch=false&dataSource=#enavSqlServer&useMessageBodyForSql=false\").id('sql-01')\n    .marshal().json(JsonLibrary.Jackson).id('toJson-01')\n\nfrom('direct://mdm get auth token').routeId('route-7')\n    .process(new Processor() {\n        @Override\n        void process(Exchange exchange) throws Exception {\n            Object payload = exchange.getIn().getBody();\n        \n        \n            URL url = new URL(\"http://mdm.enav.my:50837/api/TokenAuth/Authenticate\");\n        \n            HttpURLConnection MyConn = (HttpURLConnection) url.openConnection();\n        \n            MyConn.setRequestMethod(\"POST\");\n            MyConn.setDoOutput(true);\n            MyConn.setRequestProperty(\"Content-Type\",\"application/json\");\n            //MyConn.setRequestProperty(\"Authorization\", \"Basic \" + Base64.getEncoder().encodeToString((userName + \":\" + password).getBytes()));\n        \n            byte[] out = payload.toString().getBytes(StandardCharsets.UTF_8);\n            OutputStream stream = MyConn.getOutputStream();\n            stream.write(out);\n        \n            int responseCode = MyConn.getResponseCode();\n            System.out.println(\"GET Response Code :: \" + responseCode);\n        \n            if (responseCode == MyConn.HTTP_OK) {\n            \t// Create a reader with the input stream reader.\n            \tBufferedReader in = new BufferedReader(new InputStreamReader(\n            \t\tMyConn.getInputStream()));\n            \tString inputLine;\n        \n            \t// Create a string buffer\n            \tStringBuffer response = new StringBuffer();\n        \n            \t// Write each of the input line\n            \twhile ((inputLine = in.readLine()) != null) {\n            \t\tresponse.append(inputLine);\n            \t}\n            \tin.close();\n        \n            \tString resp = response.toString();\n        \n            \texchange.getIn().setBody(resp);\n            } else {\n            \t// Create a reader with the input stream reader.\n            \tBufferedReader in = new BufferedReader(new InputStreamReader(\n            \t\tMyConn.getInputStream()));\n            \tString inputLine;\n        \n            \t// Create a string buffer\n            \tStringBuffer response = new StringBuffer();\n        \n            \t// Write each of the input line\n            \twhile ((inputLine = in.readLine()) != null) {\n            \t\tresponse.append(inputLine);\n            \t}\n            \tin.close();\n        \n            \tString resp = response.toString();\n        \n            \texchange.getIn().setBody(resp);\n            }\n        \n        }\n    }).id('process-04')\n\nfrom('direct://mdm get vessels').routeId('route-8')\n    .process(new Processor() {\n        @Override\n        void process(Exchange exchange) throws Exception {\n            String authToken = exchange.getIn().getHeader(\"authorization\");\n            String queryString = exchange.getIn().getHeader(\"CamelHttpRawQuery\");\n        \n        \n            URL url = new URL(\"http://mdm.enav.my:50837/api/vessels?\" + queryString);\n        \n            HttpURLConnection MyConn = (HttpURLConnection) url.openConnection();\n        \n            MyConn.setRequestMethod(\"GET\");\n            //MyConn.setDoOutput(true);\n            MyConn.setRequestProperty(\"Content-Type\",\"application/json; charset=utf-8\");\n            //MyConn.setRequestProperty(\"Content-Length\", \"0\");\n            MyConn.setRequestProperty(\"Authorization\", authToken);\n        \n            int responseCode = MyConn.getResponseCode();\n            //System.out.println(\"GET Response Code :: \" + responseCode);\n        \n            if (responseCode == MyConn.HTTP_OK) {\n            \t// Create a reader with the input stream reader.\n            \tBufferedReader in = new BufferedReader(new InputStreamReader(\n            \t\tMyConn.getInputStream()));\n            \tString inputLine;\n        \n            \t// Create a string buffer\n            \tStringBuffer response = new StringBuffer();\n        \n            \t// Write each of the input line\n            \twhile ((inputLine = in.readLine()) != null) {\n            \t\tresponse.append(inputLine);\n            \t}\n            \tin.close();\n        \n            \tString resp = response.toString();\n        \n            \texchange.getIn().setBody(resp);\n            } else {\n            \t// Create a reader with the input stream reader.\n            \tBufferedReader in = new BufferedReader(new InputStreamReader(\n            \t\tMyConn.getInputStream()));\n            \tString inputLine;\n        \n            \t// Create a string buffer\n            \tStringBuffer response = new StringBuffer();\n        \n            \t// Write each of the input line\n            \twhile ((inputLine = in.readLine()) != null) {\n            \t\tresponse.append(inputLine);\n            \t}\n            \tin.close();\n        \n            \tString resp = response.toString();\n        \n            \texchange.getIn().setBody(resp);\n            }\n        \n        }\n    }).id('process-05')\n\nfrom('direct://mdm get vessels by country code').routeId('route-9')\n    .process(new Processor() {\n        @Override\n        void process(Exchange exchange) throws Exception {\n            String authToken = exchange.getIn().getHeader(\"authorization\");\n            String queryString = exchange.getIn().getHeader(\"CamelHttpRawQuery\");\n            String countryCode = exchange.getIn().getHeader(\"countryCode\");\n        \n        \n            URL url = new URL(\"http://mdm.enav.my:50837/api/vesselsByCountry/\" + countryCode + \"?\" + queryString);\n        \n            HttpURLConnection MyConn = (HttpURLConnection) url.openConnection();\n        \n            MyConn.setRequestMethod(\"GET\");\n            //MyConn.setDoOutput(true);\n            MyConn.setRequestProperty(\"Content-Type\",\"application/json; charset=utf-8\");\n            //MyConn.setRequestProperty(\"Content-Length\", \"0\");\n            MyConn.setRequestProperty(\"Authorization\", authToken);\n        \n            int responseCode = MyConn.getResponseCode();\n            //System.out.println(\"GET Response Code :: \" + responseCode);\n        \n            if (responseCode == MyConn.HTTP_OK) {\n            \t// Create a reader with the input stream reader.\n            \tBufferedReader in = new BufferedReader(new InputStreamReader(\n            \t\tMyConn.getInputStream()));\n            \tString inputLine;\n        \n            \t// Create a string buffer\n            \tStringBuffer response = new StringBuffer();\n        \n            \t// Write each of the input line\n            \twhile ((inputLine = in.readLine()) != null) {\n            \t\tresponse.append(inputLine);\n            \t}\n            \tin.close();\n        \n            \tString resp = response.toString();\n        \n            \texchange.getIn().setBody(resp);\n            } else {\n            \t// Create a reader with the input stream reader.\n            \tBufferedReader in = new BufferedReader(new InputStreamReader(\n            \t\tMyConn.getInputStream()));\n            \tString inputLine;\n        \n            \t// Create a string buffer\n            \tStringBuffer response = new StringBuffer();\n        \n            \t// Write each of the input line\n            \twhile ((inputLine = in.readLine()) != null) {\n            \t\tresponse.append(inputLine);\n            \t}\n            \tin.close();\n        \n            \tString resp = response.toString();\n        \n            \texchange.getIn().setBody(resp);\n            }\n        \n        }\n    }).id('process-06')\n\nfrom('direct://mdm get vessel by mmsi').routeId('route-10')\n    .process(new Processor() {\n        @Override\n        void process(Exchange exchange) throws Exception {\n            String authToken = exchange.getIn().getHeader(\"authorization\");\n            String queryString = exchange.getIn().getHeader(\"CamelHttpRawQuery\");\n            String mmsi = exchange.getIn().getHeader(\"mmsi\");\n        \n        \n            URL url = new URL(\"http://mdm.enav.my:50837/api/vessels/\" + mmsi + \"?\" + queryString);\n        \n            HttpURLConnection MyConn = (HttpURLConnection) url.openConnection();\n        \n            MyConn.setRequestMethod(\"GET\");\n            //MyConn.setDoOutput(true);\n            MyConn.setRequestProperty(\"Content-Type\",\"application/json; charset=utf-8\");\n            //MyConn.setRequestProperty(\"Content-Length\", \"0\");\n            MyConn.setRequestProperty(\"Authorization\", authToken);\n        \n            int responseCode = MyConn.getResponseCode();\n            //System.out.println(\"GET Response Code :: \" + responseCode);\n        \n            if (responseCode == MyConn.HTTP_OK) {\n            \t// Create a reader with the input stream reader.\n            \tBufferedReader in = new BufferedReader(new InputStreamReader(\n            \t\tMyConn.getInputStream()));\n            \tString inputLine;\n        \n            \t// Create a string buffer\n            \tStringBuffer response = new StringBuffer();\n        \n            \t// Write each of the input line\n            \twhile ((inputLine = in.readLine()) != null) {\n            \t\tresponse.append(inputLine);\n            \t}\n            \tin.close();\n        \n            \tString resp = response.toString();\n        \n            \texchange.getIn().setBody(resp);\n            } else {\n            \t// Create a reader with the input stream reader.\n            \tBufferedReader in = new BufferedReader(new InputStreamReader(\n            \t\tMyConn.getInputStream()));\n            \tString inputLine;\n        \n            \t// Create a string buffer\n            \tStringBuffer response = new StringBuffer();\n        \n            \t// Write each of the input line\n            \twhile ((inputLine = in.readLine()) != null) {\n            \t\tresponse.append(inputLine);\n            \t}\n            \tin.close();\n        \n            \tString resp = response.toString();\n        \n            \texchange.getIn().setBody(resp);\n            }\n        \n        }\n    }).id('process-07')\n\nfrom('direct://mdm get Methydro').routeId('route-11')\n    .process(new Processor() {\n        @Override\n        void process(Exchange exchange) throws Exception {\n            String authToken = exchange.getIn().getHeader(\"authorization\");\n            String queryString = exchange.getIn().getHeader(\"CamelHttpRawQuery\");\n        \n        \n            URL url = new URL(\"http://mdm.enav.my:50837/api/Methydro?\" + queryString);\n        \n            HttpURLConnection MyConn = (HttpURLConnection) url.openConnection();\n        \n            MyConn.setRequestMethod(\"GET\");\n            //MyConn.setDoOutput(true);\n            MyConn.setRequestProperty(\"Content-Type\",\"application/json; charset=utf-8\");\n            //MyConn.setRequestProperty(\"Content-Length\", \"0\");\n            MyConn.setRequestProperty(\"Authorization\", authToken);\n        \n            int responseCode = MyConn.getResponseCode();\n            //System.out.println(\"GET Response Code :: \" + responseCode);\n        \n            if (responseCode == MyConn.HTTP_OK) {\n            \t// Create a reader with the input stream reader.\n            \tBufferedReader in = new BufferedReader(new InputStreamReader(\n            \t\tMyConn.getInputStream()));\n            \tString inputLine;\n        \n            \t// Create a string buffer\n            \tStringBuffer response = new StringBuffer();\n        \n            \t// Write each of the input line\n            \twhile ((inputLine = in.readLine()) != null) {\n            \t\tresponse.append(inputLine);\n            \t}\n            \tin.close();\n        \n            \tString resp = response.toString();\n        \n            \texchange.getIn().setBody(resp);\n            } else {\n            \t// Create a reader with the input stream reader.\n            \tBufferedReader in = new BufferedReader(new InputStreamReader(\n            \t\tMyConn.getInputStream()));\n            \tString inputLine;\n        \n            \t// Create a string buffer\n            \tStringBuffer response = new StringBuffer();\n        \n            \t// Write each of the input line\n            \twhile ((inputLine = in.readLine()) != null) {\n            \t\tresponse.append(inputLine);\n            \t}\n            \tin.close();\n        \n            \tString resp = response.toString();\n        \n            \texchange.getIn().setBody(resp);\n            }\n        \n        }\n    }).id('process-08')"
    name: "eip-rest-gateway.groovy"
  - content: |-
      beans {
          enavSqlServer(org.apache.commons.dbcp2.BasicDataSource) {
              driverClassName = 'com.microsoft.sqlserver.jdbc.SQLServerDriver'
              url = 'jdbc:sqlserver://117.53.152.155;port=1433;database=VTS;Uid=sa;Pwd=Enav-DB123Sql456!!!;trustServerCertificate=true;'
              username = 'sa'
              password = 'Enav-DB123Sql456!!!'
          }
      }
    name: "enav_sql_server.groovy"
  traits:
    ingress:
      configuration:
        enabled: true
        host: "eip-rest-gw.pinc.my"
        auto: true
    jolokia:
      configuration:
        enabled: true
    logging:
      configuration:
        enabled: true
        level: "DEBUG"
    owner:
      configuration:
        enabled: true
        targetLabels:
        - "jetic.io/data.analyzer"
        - "jetic.io/deployment.uuid"
        - "jetic.io/integration.name"
        - "jetic.io/integration.revision"
        - "jetic.io/integration.uuid"
        - "jetic.io/integration.version"
        - "jetic.io/log.level"
        - "jetic.io/open.api.host"
        - "jetic.io/profile.name"
        - "jetic.io/profile.uuid"
    service:
      configuration:
        auto: true
        enabled: true
        nodePort: false
